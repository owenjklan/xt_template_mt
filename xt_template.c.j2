// 
// Much gratitude goes to Nicolas Bouliane and Jan Engelhardt,
// authors of 'Writing your own Xtables module'.
// http://www.kerneltravel.net/jiaoliu/Writing_Xtables.pdf
// 
// Written by Owen Klan - 4th Jan, 2020

#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/net.h>
#include <linux/types.h>
#include <linux/skbuff.h>
#include <linux/string.h>
#include <linux/netdevice.h>
#include <linux/netfilter.h>
#include <linux/netfilter_ipv4.h>
#include <linux/in.h>
#include <linux/ip.h>
#include <linux/tcp.h>

#include <linux/netfilter/x_tables.h>

#include "xt_{{ name.lower() }}.h"

MODULE_LICENSE("{{ module_license }}");
MODULE_AUTHOR("{{ module_author }}");
MODULE_DESCRIPTION("{{ module_description }}");
MODULE_VERSION("{{ module_version_string }}");


static void {{ name.lower() }}_mt_destroy(const struct xt_mtdtor_param *param)
{
	printk(KERN_INFO "xt_{{ name.lower() }}: Rule removed\n");
}

static bool {{ name.lower() }}_mt(const struct sk_buff *skb, struct xt_action_param *param)
{
	printk(KERN_INFO "xt_{{ name.lower() }}: Match check\n");
	return true;
}

static int {{ name.lower() }}_mt_check(const struct xt_mtchk_param *param)
{
	printk(KERN_INFO "xt_{{ name.lower() }}: Added a rule\n");
	return 0;
}

// Structure for registering an xtables match
static struct xt_match {{ name.lower() }}_mt4_reg __read_mostly = {
	.name = "{{ name.lower() }}",
	.revision = 0,
	.family = AF_INET,
	.match = {{ name.lower() }}_mt,
	.matchsize = sizeof(struct xt_{{ name.lower() }}_mtinfo),
	.checkentry = {{ name.lower() }}_mt_check,
	.destroy = {{ name.lower() }}_mt_destroy,
	.me = THIS_MODULE,
};

static int __init linux_module_init(void) {
	int retval = 0;

    printk(KERN_INFO "xt_{{ name.lower() }}: Module loaded\n");
    printk(KERN_INFO "xt_{{ name.lower() }}: Registering match\n");

    retval = xt_register_match(&{{ name.lower() }}_mt4_reg);
    if (retval != 0) {
    	printk(KERN_INFO "xt_{{ name.lower() }}: Match registration failed! %d\n", retval);
    } else {
    	printk(KERN_INFO "xt_{{ name.lower() }}: Match registered successfully!\n");
    }
    return retval;
}

static void __exit linux_module_exit(void) {
	xt_unregister_match(&{{ name.lower() }}_mt4_reg);
    printk(KERN_INFO "xt_{{ name.lower() }}: Module un-loaded\n");
}

module_init(linux_module_init);
module_exit(linux_module_exit);